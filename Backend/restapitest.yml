AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  # StageName:
  #   Type: String
  #   Default: v1
  #   Description: Name of API stage.
  Environment:
    Type: String
    AllowedValues:
      - dev
      - staging
  ApiGatewayName:
    Type: String
    Default: ReqValidatorsSample    
  Codeuris3bucketname:
    Type: String
    Description: codeuri bucket
    # AllowedValues:
    #   - test-api-circleci2
    #   - uideploy
    Default: test-api-circleci2
  codeuris3key:
    Type: String
    Description: s3 key for codeuri deployment
    Default: aws_lambda_artifact.zip
Resources:
  MyApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub "${ApiGatewayName}-${Environment}"
  # RestApi:
  #   Type: AWS::ApiGateway::RestApi
  #   Properties:
  #     Description: My Rest API
  #     Name: !Sub "Myapi-${Environment}"    
  RequestBodyModelId:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      RestApiId: !Ref MyApi
      ContentType: application/json
      Description: Request body model for Pet ID.
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: RequestBodyModelId
        properties:
            id:
              type: integer
  RequestBodyModel: 
    Type: 'AWS::ApiGateway::Model'
    Properties:
      RestApiId: !Ref MyApi
      ContentType: application/json
      Description: Request body model for Pet type, name, price, and ID.
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: RequestBodyModel
        required:
          - price
          - name
          - type
        type: object
        properties:
            id:
              "$ref": !Sub 
                - 'https://apigateway.amazonaws.com/restapis/${MyApi}/models/${RequestBodyModelId}'
                - Api: !Ref MyApi
                  RequestBodyModelId: !Ref RequestBodyModelId
            price: 
              type: number
              minimum: 26
              maximum: 500
            name:
              type: string
            type:
              type: string
              enum:
                - "dog"
                - "cat"
                - "fish"
  GETValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: params-only
      RestApiId: !Ref MyApi
      ValidateRequestBody: False
      ValidateRequestParameters: True 
  POSTValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: body-only
      RestApiId: !Ref MyApi
      ValidateRequestBody: True
      ValidateRequestParameters: False
  ValidationResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyApi
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: 'validation'
  ValidationMethodGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref MyApi
      ResourceId: !Ref ValidationResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestValidatorId: !Ref GETValidator
      RequestParameters:
        method.request.querystring.q1: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: GET
        Uri: http://petstore-demo-endpoint.execute-api.com/petstore/pets/
  ValidationMethodPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref MyApi
      ResourceId: !Ref ValidationResource
      HttpMethod: POST
      AuthorizationType: NONE
      RequestValidatorId: !Ref POSTValidator
      RequestModels:
        application/json : !Ref RequestBodyModel 
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: POST
        Uri: http://petstore-demo-endpoint.execute-api.com/petstore/pets/
  # ApiDeployment:
  #   Type: 'AWS::ApiGateway::Deployment'
  #   DependsOn:
  #     - ValidationMethodGet
  #     - RequestBodyModel 
  #   Properties:
  #     RestApiId: !Ref MyApi
  #     StageName: 'dev'
  APIDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - ValidationMethodGet
      - RequestBodyModel
    Properties:
      RestApiId: !Ref MyApi
      StageName: !Sub "${Environment}-stage"
  ApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      # StageName: !Sub "${Environment}-stage"
      StageName: !Sub "staging-${AWS::StackName}-${AWS::Timestamp}"
      RestApiId: !Ref MyApi
      DeploymentId: !Ref APIDeployment
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          ThrottlingBurstLimit: 110
          ThrottlingRateLimit: 100
  #     Variables:
  #       LambdaAlias: dev
  # StageStage:
  #   Type: 'AWS::ApiGateway::Stage'
  #   Properties:
  #     StageName: staging
  #     RestApiId: !Ref RestApi
  #     DeploymentId: !Ref APIDeployment
  #     MethodSettings:
  #       - ResourcePath: "/*"
  #         HttpMethod: "*"
  #         ThrottlingBurstLimit: 110
  #         ThrottlingRateLimit: 100
  #     Variables:
  #       LambdaAlias: staging      
      
  # CloudFormation creates a lambda function named <CloudFormationStackName-ResourceName-RandomChars>
  # Example: CreateLambdaFunction-TestLambdaFunction-N7S3FMXJ8Z8R
  TestLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda_handler2
      # Code:
      #   S3Bucket: "test-api-circleci2"
      #   # S3Key: "packaged.ym"
      #   # S3Key: "packaged.zip"
      #   S3Key: "function.zip"
      # CodeUri: Lambda.py
      # CodeUri: !Sub 's3://${Codeuris3bucketname}/${codeuris3key}'
      CodeUri:
          Bucket: !Ref Codeuris3bucketname
          Key: !Ref codeuris3key 
      # Handler: Backend/Lambda.lambda_handler
      Handler: Lambda.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      # Tags:
      # -
      #   Key: "Documentation"
      #   Value: "Docbot"
      
  LambdaFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt TestLambdaFunction.Arn

  # Creates an execution role called <CloudFormationStackName-ResourceName-RandomChars>
  # Example: CreateLambdaFunction-LambdaExecutionRole-1TWFONVJX3VZQ
  # The execution role is assigned to the lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - "sts:AssumeRole"
      RoleName: backendiamrole    
      Path: "/"
      # Create a policy attached to the role
      # Allow Cloudwatch logging
      Policies:
      - PolicyName: "AllowLogging"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - logs:*
            - s3:GetObject
            Resource: 
              - arn:aws:logs:*:*:*
              - arn:aws:s3:::test-api-circleci2/*
            

  # Permission for API Gateway endpoint to call TestLambdaFunction
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt
        - TestLambdaFunction
        - Arn
      Principal: apigateway.amazonaws.com    
# Outputs:
#   ApiRootUrl:
#     Description: Root Url of the API
#     Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'
    
